import { CommonModule } from '@angular/common';
import { Component } from '@angular/core';
import { ActivatedRoute, Router, RouterLink } from '@angular/router';
import { Bill } from '../../model/Bill';
import { BillService } from '../../service/bill/bill.service';
import {
  FormsModule,
  ReactiveFormsModule,
  FormGroup,
  FormBuilder,
  Validators,
} from '@angular/forms';
import { TransactionService } from '../../service/transaction/transaction.service';
import { CardService } from '../../service/card/card.service';
import { CardDetails } from '../../model/CardDetails';
import { MatSnackBar, MatSnackBarModule } from '@angular/material/snack-bar';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';

@Component({
  selector: 'app-payment',
  standalone: true,
  imports: [
    RouterLink,
    CommonModule,
    FormsModule,
    ReactiveFormsModule,
    MatSnackBarModule,
    MatSlideToggleModule,
  ],
  templateUrl: './payment.component.html',
  styleUrls: ['./payment.component.css'],
})
export class PaymentComponent {
  customerId: string = '';
  billId: number | null = null;
  cardId: number | null = null;
  walletId: number | null = null;
  paymentMethod: string | null = null;
  selectedBill: Bill | null = null;
  isEarly: boolean = false;

  baseDiscount: number = 5; // Default discount percentage
  earlyPaymentDiscount: number = 5; // Additional early payment discount
  finalAmount: number | null = null; // Amount after discounts
  paymentForm: FormGroup; // Reactive Form

  cardDetails: CardDetails | null = null;

  isPartialPayment: boolean = false;

  constructor(
    private route: ActivatedRoute,
    private billService: BillService,
    private transactionService: TransactionService,
    private cardService: CardService,
    private router: Router,
    private fb: FormBuilder, // Inject FormBuilder
    private snackbar: MatSnackBar
  ) {
    // Initialize the reactive form
    this.paymentForm = this.fb.group({
      paymentAmount: ['', [Validators.required, Validators.min(1)]],
    });
  }

  ngOnInit(): void {
    this.route.queryParams.subscribe((params) => {
      this.billId = params['billId'];
      this.cardId = params['cardId'];
      this.walletId = params['walletId'];
      this.paymentMethod = this.cardId ? 'card' : 'wallet';
    });
    this.customerId = localStorage.getItem('customerId') || '';
    this.fetchBillDetails();
    this.getCardDetails();
  }

  fetchBillDetails() {
    if (this.billId) {
      this.billService.getBillsByInvoiceId(this.billId).subscribe(
        (bill: Bill) => {
          this.selectedBill = bill;
          this.calculateFinalAmount();
        },
        (error) => {
          console.error('Error fetching bill details', error);
        }
      );
    }
  }

  getCardDetails() {
    if (this.cardId !== null) {
      this.cardService.getCardDetailsByCardId(this.cardId).subscribe(
        (data: CardDetails) => {
          this.cardDetails = data;
        },
        (error) => {
          console.error('Error fetching card details:', error);
        }
      );
    }
  }

  calculateFinalAmount() {
    if (this.selectedBill) {
      const baseAmount = this.selectedBill.amount;
      const dueDate = new Date(this.selectedBill.due_date);
      const currentDate = new Date();

      if (this.selectedBill.status === 'PARTIALLY') {
        this.finalAmount = baseAmount;
        console.log('partial');
      } else {
        console.log('full paymnet');

        let totalDiscount = this.baseDiscount; // Default 5%
        if (currentDate <= dueDate) {
          this.isEarly = true;
          totalDiscount += this.earlyPaymentDiscount; // Additional 5% for early payment
        }
        this.finalAmount = baseAmount - (baseAmount * totalDiscount) / 100;
      }
    }
  }

  // togglePartialPayment(event: Event) {
  //   this.isPartialPayment = (event.target as HTMLInputElement).checked;

  //   // If partial payment is not selected, clear the amount input field and disable validation
  //   if (!this.isPartialPayment) {
  //     this.paymentForm.get('paymentAmount')?.reset();
  //   }
  // }

  makePayment() {
    // Validate fields before making payment
    const paymentAmount = this.isPartialPayment
      ? this.paymentForm.get('paymentAmount')?.value
      : this.finalAmount;

    if (paymentAmount <= 0 || !paymentAmount) {
      console.error('Invalid payment amount');
      this.snackbar.open(
        'Invalid payment amount. Please enter a valid amount.',
        'Close',
        {
          duration: 2000, // Duration of the toast in milliseconds
        }
      );
      return;
    }

    const paymentData: any = {
      customerId: this.customerId,
      invoiceId: this.billId,
      amount: paymentAmount,
      paymentMethod: this.paymentMethod,
      cardId: this.cardDetails?.id,
      isEarly: this.isEarly,
      transactionId: 99999, // Optional, can be generated by the backend
      status: 'pending',
      transactionDate: new Date(),
      invoiceStatus: 'pending',
    };

    // Call the service to make payment
    this.transactionService.createTransaction(paymentData).subscribe(
      (response: any) => {
        if (response.success) {
          // Successful payment
          console.log('Payment successful', response);
          this.snackbar.open('Payment Successful', 'Close', {
            duration: 2000, // Duration of the toast in milliseconds
          });
          setTimeout(() => {
            this.router.navigate(['/dashboard/due-bills']);
          }, 1000);
        } else {
          // Handle API error response
          console.error('Payment failed: ', response.message);
          this.snackbar.open(
            response.message || 'Payment failed. Please try again.',
            'Close',
            {
              duration: 2000, // Duration of the toast in milliseconds
            }
          );
        }
      },
      (error) => {
        // Handle HTTP error response
        console.error('Error processing payment', error);
        this.snackbar.open('Payment failed. Please try again.', 'Close', {
          duration: 2000, // Duration of the toast in milliseconds
        });
      }
    );
  }

  private showSnackbar(message: string, action: string) {
    this.snackbar.open(message, action, {
      duration: 3000, // Duration in milliseconds
      horizontalPosition: 'right', // Adjust position as needed
      verticalPosition: 'bottom', // Adjust position as needed
    });
  }
}
